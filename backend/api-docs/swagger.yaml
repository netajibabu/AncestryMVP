openapi: 3.0.0
info:
  title: Ancestry MVP API Documentation
  version: 1.0.0
  description: API documentation for Ancestry MVP backend

servers:
  - url: http://localhost:5000
    description: Development server

components:
  schemas:
    Person:
      type: object
      properties:
        _id:
          type: string
          example: 60d21b4667d0d8992e610c85
        firstName:
          type: string
          example: John
        middleName:
          type: string
          example: Michael
        surName:
          type: string
          example: Doe
        fatherId:
          type: string
          nullable: true
          example: 60d21b4667d0d8992e610c86
        motherId:
          type: string
          nullable: true
          example: 60d21b4667d0d8992e610c87
        gender:
          type: string
          enum: [male, female, other]
          example: male
        dateOfBirth:
          type: string
          format: date
          example: 1990-01-01
        dateOfDeath:
          type: string
          format: date
          nullable: true
          example: 2070-01-01
        createdAt:
          type: string
          format: date-time
          example: "2024-03-20T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-03-20T10:00:00Z"

paths:
  /api/test:
    get:
      summary: Test endpoint to verify server is running
      tags:
        - Test
      responses:
        '200':
          description: Server is running successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Backend server is running!

  /api/persons:
    get:
      summary: Get all persons
      tags:
        - Persons
      responses:
        '200':
          description: List of persons retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to fetch persons

    post:
      summary: Insert a new person
      tags:
        - Persons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - surName
                - gender
                - dateOfBirth
              properties:
                firstName:
                  type: string
                  example: John
                middleName:
                  type: string
                  example: Michael
                surName:
                  type: string
                  example: Doe
                fatherId:
                  type: string
                  nullable: true
                  example: 60d21b4667d0d8992e610c86
                motherId:
                  type: string
                  nullable: true
                  example: 60d21b4667d0d8992e610c87
                gender:
                  type: string
                  enum: [male, female, other]
                  example: male
                dateOfBirth:
                  type: string
                  format: date
                  example: 1990-01-01
                dateOfDeath:
                  type: string
                  format: date
                  nullable: true
                  example: 2070-01-01
      responses:
        '201':
          description: Person created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid input
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to insert person

  /api/persons/filter:
    post:
      summary: Filter persons by firstName and/or surName
      tags:
        - Persons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: Filter by firstName (case-insensitive partial match)
                  example: John
                surName:
                  type: string
                  description: Filter by surName (case-insensitive partial match)
                  example: Doe
      responses:
        '200':
          description: Filtered list of persons retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to filter persons

  /api/persons/{id}:
    get:
      summary: Get a person by ID
      tags:
        - Persons
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The person ID
      responses:
        '200':
          description: Person retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Person not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to fetch person
    put:
      summary: Update a person by ID
      tags:
        - Persons
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The person ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                middleName:
                  type: string
                  example: Michael
                surName:
                  type: string
                  example: Doe
                fatherId:
                  type: string
                  nullable: true
                  example: 60d21b4667d0d8992e610c86
                motherId:
                  type: string
                  nullable: true
                  example: 60d21b4667d0d8992e610c87
                gender:
                  type: string
                  enum: [male, female, other]
                  example: male
                dateOfBirth:
                  type: string
                  format: date
                  example: 1990-01-01
                dateOfDeath:
                  type: string
                  format: date
                  nullable: true
                  example: 2070-01-01
      responses:
        '200':
          description: Person updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid input
        '404':
          description: Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Person not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to update person
    delete:
      summary: Delete a person by ID
      tags:
        - Persons
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The person ID
      responses:
        '200':
          description: Person deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Person deleted
        '404':
          description: Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Person not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to delete person

  /api/persons/bulk:
    post:
      summary: Add multiple people at once
      tags:
        - Persons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Person'
      responses:
        '201':
          description: People created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Request body must be a non-empty array of people. 